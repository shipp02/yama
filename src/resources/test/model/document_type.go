//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type DocumentType string

const (
	DocumentType_Pdf   DocumentType = "pdf"
	DocumentType_Docx  DocumentType = "docx"
	DocumentType_Jpg   DocumentType = "jpg"
	DocumentType_Png   DocumentType = "png"
	DocumentType_Pages DocumentType = "pages"
	DocumentType_Odt   DocumentType = "odt"
	DocumentType_Txt   DocumentType = "txt"
	DocumentType_HTML  DocumentType = "html"
	DocumentType_Gif   DocumentType = "gif"
	DocumentType_Mpeg  DocumentType = "mpeg"
	DocumentType_Mp3   DocumentType = "mp3"
	DocumentType_Aac   DocumentType = "aac"
	DocumentType_Ai    DocumentType = "ai"
)

func (e *DocumentType) Scan(value interface{}) error {
	if v, ok := value.(string); !ok {
		return errors.New("jet: Invalid data for DocumentType enum")
	} else {
		switch string(v) {
		case "pdf":
			*e = DocumentType_Pdf
		case "docx":
			*e = DocumentType_Docx
		case "jpg":
			*e = DocumentType_Jpg
		case "png":
			*e = DocumentType_Png
		case "pages":
			*e = DocumentType_Pages
		case "odt":
			*e = DocumentType_Odt
		case "txt":
			*e = DocumentType_Txt
		case "html":
			*e = DocumentType_HTML
		case "gif":
			*e = DocumentType_Gif
		case "mpeg":
			*e = DocumentType_Mpeg
		case "mp3":
			*e = DocumentType_Mp3
		case "aac":
			*e = DocumentType_Aac
		case "ai":
			*e = DocumentType_Ai
		default:
			return errors.New("jet: Inavlid data " + string(v) + "for DocumentType enum")
		}

		return nil
	}
}

func (e DocumentType) String() string {
	return string(e)
}
